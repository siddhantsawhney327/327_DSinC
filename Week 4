#include <stdio.h>
#define SIZE 5 

struct Queue {
    int arr[SIZE];
    int front;
    int rear;
};

void insert(struct Queue *q, int value);
void delete(struct Queue *q);
void display(struct Queue *q);

int main() {
    struct Queue q;
    q.front = -1; 
    q.rear = -1; 

    int choice, value;

    while (1) {
        printf("\nQueue Operations:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter the value to insert: ");
            scanf("%d", &value);
            insert(&q, value);
            break;
        case 2:
            delete(&q);
            break;
        case 3:
            display(&q);
            break;
        case 4:
            printf("Exiting...\n");
            return 0;
        default:
            printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}

void insert(struct Queue *q, int value) {
    if ((q->rear + 1) % SIZE == q->front) {
        printf("Queue Overflow! Cannot insert %d.\n", value);
        return;
    }

    if (q->front == -1) {
        q->front = 0; 
    }

    q->rear = (q->rear + 1) % SIZE; 
    q->arr[q->rear] = value;
    printf("Inserted %d into the queue.\n", value);
}

void delete(struct Queue *q) {
    if (q->front == -1) {
        printf("Queue Underflow! Queue is empty.\n");
        return;
    }

    printf("Deleted %d from the queue.\n", q->arr[q->front]);

    if (q->front == q->rear) {
        q->front = -1;
        q->rear = -1;
    } else {
        q->front = (q->front + 1) % SIZE;
    }
}

void display(struct Queue *q) {
    if (q->front == -1) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue elements: ");
    int i = q->front;
    while (1) {
        printf("%d ", q->arr[i]);
        if (i == q->rear) {
            break;
        }
        i = (i + 1) % SIZE;
    }
    printf("\n");
}
